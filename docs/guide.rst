==========
User guide
==========

Running the pipeline
====================

Each library will be processed in a separate subdirectory of the pipeline
directory, such as ``pipeline/xyz`` for a library named ``xyz``. Use the command
``igypipe init pipeline/xyz`` to initialize the directory for a new library. When
you run it, you will be asked to select the file that contains the reads that
you want to analyze. Only select the first file; the second file will be
determined automatically.

You will then be asked for the IgBLAST database directory to use. Next, you
should adjust the configuration file ``pipeline.conf`` if necessary.

Finally, make sure you are in the ``xyz`` directory, and then run::

    snakemake -j

The ``-j`` option makes sure that as many processors as available on your machine
are used in parallel.


Creating a new IgBLAST database
===============================

To reduce confusion, do not modify the database, but create a new version
instead. Create a new directory in ``igypipe/databases``.
Then copy FASTA files with V, D, J sequences into the directory. The files need
to be named ``rhesus_monkey_V.fasta``, ``rhesus_monkey_D.fasta`` and
``rhesus_monkey_J.fasta``. The ``makeblastdb`` program will be run automatically
by the pipeline next time it runs.


The assigned.tab table
======================

This file is created by
The file created by ``igypipe parse`` is written to a file named ``...assigned.tab``. It contains the results of parsing IgBLAST output. Each row describes the result for a single query sequence. The first row is a header row.

Columns
-------

* count: How many copies of input sequence this query sequence represents. Copied from the ``;size=3;`` entry in the FASTA header field that is added by ``VSEARCH -derep_fulllength``.
* V_gene, D_gene, J_gene: V/D/J gene match for the query sequence
* stop (yes/no): whether the sequence contains a stop codon
* productive
* UTR
* leader
* V_covered, D_covered, J_covered: percentage of bases of the reference gene that is covered by the bases of the query sequence
* V_evalue, D_evalue, J_evalue: E-value of V/D/J hit
* FR1_SHM, CDR1_SHM, FR2_SHM, CDR2_SHM, FR3_SHM, V_SHM, J_SHM: rate of somatic hypermutation (actually, an error rate)
* CDR1_nt, CDR1_aa, CDR2_nt, CDR2_aa, CDR3_nt, CDR3_aa
* V_nt, V_aa: nucleotide and amino acid sequence of V gene match
* V_end, VD_junction, D_region, DJ_junction, J_start: nucleotide sequences
* name
* barcode
* race_G
* genomic_sequence

The UTR, leader, barcode, race_G and genomic_sequence columns are filled in the following way.

1. Split 5' end barcode from the sequence (if barcode length is zero, this will be empty), put it in the **barcode** column.
2. Remove the initial run of G bases from the remaining sequence, put that in the **race_G** column.
3. The remainder is put into the **genomic_sequence** column.
4. If there is a V gene match, take the sequence *before* it and split it up in the following way. Search for the start codon and write the part before it into the **UTR** column. Write the part starting with the start column into the **leader** column.


The discover.tab table
======================

The output table generated by ``igypipe discover``, named ``...discover.tab``, has the following columns:

* ``gene``: name of the V gene

Then there are sequence counts for four subsets of all the V sequences assigned to that gene. The groups are:

* ``total``: *all* sequences assigned to this gene
* ``window`: Those sequences assigned to this gene that are within the specified error rate window (with command-line options ``--left`` and ``--right``). The consensus sequence is computed from these.
* ``exact``: Those sequences assigned to this gene that are identical to the consensus (exact matches)
* ``approx``: Those sequences assigned to this gene that match the consensus approximately (the allowed error rate is by default 1%, but can be changed with the ``--error-rate`` parameter)

For each of those four groups, the following numbers are given:

* ``_seqs``: Number of sequences in this group
* ``_unique_J``: Number of unique J genes used in this group
* ``_unique_CDR3``: Number of unique CDR3 sequences used in this group

Finally, the last columns are:

* ``N_bases``: Number of `N` bases in the consensus
* ``database_diff``: Number of differences between consensus and database sequence. This is only assigned when the database sequences were provided with ``--database``.
* ``consensus``: The consensus sequence itself


Configuration
=============

forward_primers, reverse_primers: If any primer sequences are given here, then
reads that do not have the primer sequence will be discarded.

If you use an unstranded protocol, set the ``stranded`` setting to ``false``.
The pipeline will then search also reverse-complemented reads for primers.
